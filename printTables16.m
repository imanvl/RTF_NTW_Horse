%%
% This file writes the results to xls files for ease of comparison/sharing.
% No further manipulation of the rsults.
% First a table with results of various metrics (rows) for different 
% algorithms (collumns).
% Second the distribution of metrics of the orginal network (e.g. in-degree)


% Table of results
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Set the stage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
filename = [pwd '\_results\tableOfResults', networkName, '.xlsx'];
sheet = 'Stats';

% Check if the file is there, and, if yes, overwrite
% We need this because in an older version we were writing to different
% cells (and these would thus still be in the sheet)

%try
%    t = xlsread(filename);
%catch err
%    if ~isempty(t)
%        xlswrite(filename,zeros(size(t))*nan, sheet);
%    end
%end
%%
if exist(filename,'file')==2
  delete(filename) ;
end

%% Header row
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In case you want to define a different set of reported approaches instead
% of those computed in the horseMaster
%approachesList = {...
   % 'orig',...
  %  'maxe',...
    %'anan',...
   % 'bara',...
  %  'dreh',...
 %   'mast2',...
%    'batt'};
%'hala',...

approachesList;

xlRange = 'D1';

xlswrite(...
    filename,...
    approachesList,...
    sheet,...
    xlRange)

%% Header column
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
xlswrite(...
    filename,...
    {'Statistics'},...
    sheet,...
    'A2')

statistics = {...
    '# of links'; ...
    'Density'; ...
    'Avg Degree'; ...
    'Med Degree'; ...
    'Assortativity'; ...
    'Clustering'; ...
    'Lender Dep'; ...
    'Borrower Dep'; ...
    'Mean HHI Assets'; ... 
    'Median HHI Assets'; ...
    'Mean HHI Liabilities'; ...             
    'Median HHI Liabilities'; ...       
    'Core Size (% banks)';...
    'Error score(% links)'};

xlswrite(...
    filename,...
    statistics,...
    sheet,...
    'B3')

SimilarityStartRow = 2 + numel(statistics) + 1;

xlswrite(...
    filename,...
    {'Similarity'},...
    sheet,...
    strcat('A', num2str(SimilarityStartRow)))

row = SimilarityStartRow + 1;
similarities ={...
    'Hamming';...
    'Jaccard';...
    'Cosine';...
    'Jensen'};

xlswrite(...
    filename,...
    similarities,...
    sheet,...
    strcat('B', num2str(row)))

ConfusionStartRow = SimilarityStartRow + numel(similarities)+1;
xlswrite(...
    filename,...
    {'Confusion Matrix'},...
    sheet,...
    strcat('A', num2str(ConfusionStartRow)))

confusionMatrix = {...
    'True Positives';...
    'True Negatives';...
    'False Positives';...
    'False Negatives';...
    'Accuracy'};

row = ConfusionStartRow + 1;
xlswrite(...
    filename,...
    confusionMatrix,...
    sheet,...
    strcat('B', num2str(row)))

DebtRankStartRow = ConfusionStartRow + numel(confusionMatrix) + 1;
xlswrite(...
    filename,...
    {'DebtRank'},...
    sheet,...
    strcat('A', num2str(DebtRankStartRow)))

debtRanks ={...			
	'Top 1';...
    'Top 3';...
    'Correlation'};

row  = DebtRankStartRow + 1;
xlswrite(...
    filename,...
    debtRanks,...
    sheet,...
    strcat('B', num2str(row)))

LiquidityStartRow = DebtRankStartRow + numel(debtRanks) + 1;
xlswrite(...
    filename,...
    {'Liquidity Shortfall'},...
    sheet,...
    strcat('A', num2str(LiquidityStartRow)))

liqShortfall = {...
    'Top 1';...
    'Top 3';...
    'Correlation'};

row = LiquidityStartRow + 1;

xlswrite(...
    filename,...
    liqShortfall,...
    sheet,...
    strcat('B', num2str(row)))

% One collumn for each of the approachesList
column = ['D';'E';'F';'G';'H';'I';'J';'K'];



%% Fill in the statistics
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
statisticsList = {...
    'Links',...
    'Densities',...
    'MeanDeg',...
    'MedoDeg',...
    'SymPearson',...
    'Cmit',...
    'LendDep',...
    'BoroDep',...
    'MeanHHIAsset',...                   
    'MedianHHIAsset',...                
    'MeanHHILiab',...                  
    'MedianHHILiab',...                
    'coresize',...
    'score'};

for i = 1 : length(approachesList)
    technique = approachesList{i};
    
    for j = 1 : length(statisticsList)
        metric = statisticsList{j};
        
        xlRange = [column(i) num2str(2+j)];
        report = num2str([ ...
            quantile(outputMatrices.(technique).(metric),0.1), ...
            median(outputMatrices.(technique).(metric)),...
            quantile(outputMatrices.(technique).(metric),0.9)]);
        
        xlswrite(...
            filename,...
            median(outputMatrices.(technique).(metric)),...
            sheet,...
            xlRange)
    end
end

%% Fill in Similarity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
similarityList = {...
    'hamming',...
    'jaccard',...
    'cosine',...
    'jensen'};

for i = 1 : length(approachesList)
    technique = approachesList{i};
    
    for j = 1 : length(similarityList)
        metric = similarityList{j};
        
        xlRange = [column(i) num2str(SimilarityStartRow+j)];
        xlswrite(...
            filename,...
            median(outputMatrices.(technique).similarity.(metric)),...
            sheet,...
            xlRange)
    end
end

%% Fill in Confusion Matrix
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
confusionMatrixList = {...
    'truePositives',...
    'trueNegatives',...
    'falsePositives',...
    'falseNegatives',...
    'accuracy'};

for i = 1 : length(approachesList)
    technique = approachesList{i};
    
    for j = 1 : length(confusionMatrixList)
        metric = confusionMatrixList{j};
        
        xlRange = [column(i) num2str(ConfusionStartRow+j)];
        xlswrite(...
            filename,...
            median(outputMatrices.(technique).confusionMatrix.(metric)),...
            sheet,...
            xlRange)
    end
end

%% Fill in DebtRank results
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

debtRankStatsList = {...
    'dtop1',...
    'dtop3',...
    'dcorr'};

for i = 1 : length(approachesList)
    technique = approachesList{i};
    k=0;    
    for j = 1 : length(debtRankStatsList)
        metric = debtRankStatsList{j};
        
%         xlRange = [column(i) num2str(DebtRankStartRow+j+k)];
%         xlswrite(...
%             filename,...
%             mean(nansum(outputMatrices.(technique).(metric),1)),...
%             sheet,...
%             xlRange)
        
        xlRange = [column(i) num2str(DebtRankStartRow+j)];
        xlswrite(...
            filename,...
            mean(nanmean(outputMatrices.(technique).(metric),1)),...
            sheet,...
            xlRange)        
        k=k+1;
    end
end


%% Fill in Liquidity results
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
LiquidityList = {...
    'ltop1',...
    'ltop3',...
    'lcorr'};

for i = 1 : length(approachesList)
    technique = approachesList{i};
    
    for j = 1 : length(LiquidityList)
        metric = LiquidityList{j};
        
        xlRange = [column(i) num2str(LiquidityStartRow+j)];

        xlswrite(...
            filename,...
            mean(nanmean(outputMatrices.(technique).(metric),1)),...
            sheet,...
            xlRange)
    end
end


%  Distribution of metrics of the orginal network
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Set the stage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
filename = [pwd '\_results\tableOrigMetrics', networkName, '.xlsx'];
sheet = 'Stats';

% Check if the file is there, and, if yes, overwrite
% We need this because in an older version we were writing to different
% cells (and these would thus still be in the sheet)

if exist(filename,'file')==2
  delete(filename) ;
end

momentsList = {...
    'min',...
    'max',...
    'mean',...
    'p25',...
    'p50',...
    'p75',...
};

metricsList = {...
    'degree.in',...
    'degree.out',...
    'closeness',...
    'betweenness',...
    'eigen',...
};


%% Header row
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%xlRange = 'D1';

xlswrite(...
    filename,...
    momentsList,...
    sheet,...
   'B1')

%% Header column
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
xlswrite(...
    filename,...
    {'Metrics'},...
    sheet,...
    'A1')

metricLabels = {...
    'In-Degree'; ...
    'Out-Degree'; ...
    'Closeness'; ...
    'Betweenness'; ...
    'Eigenvalue'; ...
};

xlswrite(...
    filename,...
    metricLabels,...
    sheet,...
    'A2')
% One collumn for each of the moments
column = ['B';'C';'D';'E';'F';'G'];

for i = 1 : length(momentsList)
    moment_i = momentsList{i};
    
    for j = 1 : length(metricsList)
        metric = metricsList{j};
        
        xlRange = [column(i) num2str(1+j)];
        outputValue = eval(['outputMatrices.orig.' metric '.' moment_i]);
       %display (outputLocation );
       
        
        xlswrite(...
            filename,...
            outputValue,...
            sheet,...
            xlRange)
    end
end
