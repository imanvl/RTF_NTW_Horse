
%%
filename = ...
    [pwd '\_results\tableOfResults', networkName, '.xlsx'];
sheet = 'Stats';

% Check if the file is there, and, if yes, overwrite
% We need this because in an older version we were writing to different
% cells (and these would thus still be in the sheet)
t = xlsread(filename);
if ~isempty(t)
    xlswrite(filename,zeros(size(t))*nan, sheet);
end
%%

%% Header row
methods = {...
    'orig',...
    'maxe',...
    'anan',...
    'bara',...
    'dreh',...
    'mast2',...
    'batt'};
%'hala',...


xlRange = 'D1';

xlswrite(...
    filename,...
    methods,...
    sheet,...
    xlRange)

%% Header column

xlswrite(...
    filename,...
    {'Statistics'},...
    sheet,...
    'A2')

statistics = {...
    '# of links'; ...
    'Density'; ...
    'Avg Degree'; ...
    'Med Degree'; ...
    'Assortativity'; ...
    'Clustering'; ...
    'Lender Dep'; ...
    'HHI Assets'; ...
    'Borrower Dep'; ...
    'HHI Liabilities'; ...
    'Core Size (% banks)';...
    'Error score(% links)'};

xlswrite(...
    filename,...
    statistics,...
    sheet,...
    'B3')

SimilarityStartRow = 2 + numel(statistics) + 1;

xlswrite(...
    filename,...
    {'Similarity'},...
    sheet,...
    strcat('A', num2str(SimilarityStartRow)))

row = SimilarityStartRow + 1;
similarities ={...
    'Hamming';...
    'Jaccard';...
    'Cosine';...
    'Jensen'};

xlswrite(...
    filename,...
    similarities,...
    sheet,...
    strcat('B', num2str(row)))

ConfusionStartRow = SimilarityStartRow + numel(similarities)+1;
xlswrite(...
    filename,...
    {'Confusion Matrix'},...
    sheet,...
    strcat('A', num2str(ConfusionStartRow)))

confusionMatrix = {...
    'True Positives';...
    'True Negatives';...
    'False Positives';...
    'False Negatives';...
    'Accuracy'};

row = ConfusionStartRow + 1;
xlswrite(...
    filename,...
    confusionMatrix,...
    sheet,...
    strcat('B', num2str(row)))

DebtRankStartRow = ConfusionStartRow + numel(confusionMatrix) + 1;
xlswrite(...
    filename,...
    {'DebtRank'},...
    sheet,...
    strcat('A', num2str(DebtRankStartRow)))

debtRanks ={...
    'Top 1';...
    'Top 3';...
    'Correlation';...
    'Overlap 1';...
    'Overlap 3'};

row  = DebtRankStartRow + 1;
xlswrite(...
    filename,...
    debtRanks,...
    sheet,...
    strcat('B', num2str(row)))

LiquidityStartRow = DebtRankStartRow + numel(debtRanks) + 1;
xlswrite(...
    filename,...
    {'Liquidity'},...
    sheet,...
    strcat('A', num2str(LiquidityStartRow)))

liqShortfall = {...
    'Shortfall'};

row = LiquidityStartRow + 1;

xlswrite(...
    filename,...
    liqShortfall,...
    sheet,...
    strcat('B', num2str(row)))

% One collumn for each of the methods
%'K'
column = ['D';'E';'F';'G';'H';'I';'J'];



%% Format statistics

statisticsList = {...
    'Links',...
    'Density',...
    'MeanDeg',...
    'MedoDeg',...
    'SymPearson',...
    'Cmit',...
    'LendDep',...
    'HHIAsset',...
    'BoroDep',...
    'HHILiab',...
    'coresize',...
    'score'};

% Iman: in the Debtrank section we have 
% median(1 * outputMatrices.(technique).(metric)),...
% Is that the way to colapse?

for i = 1 : length(methods)
    technique = methods{i};
    
    for j = 1 : length(statisticsList)
        metric = statisticsList{j};
        
        xlRange = [column(i) num2str(2+j)];
        report = num2str([ ...
            quantile(outputMatrices.(technique).(metric),0.1), ...
            median(outputMatrices.(technique).(metric)),...
            quantile(outputMatrices.(technique).(metric),0.9)]);

        if strcmp(metric,'HHIAsset') == 1 | strcmp(metric,'HHILiab') == 1
            xlswrite(...
                filename,...
                median(1 * outputMatrices.(technique).(metric)),...
                sheet,...
                xlRange)            
        else
            xlswrite(...
                filename,...
                median(outputMatrices.(technique).(metric)),...
                sheet,...
                xlRange)
        end
    end
end

%% Format similarity

similarityList = {...
    'hamming',...
    'jaccard',...
    'cosine',...
    'jensen'};

for i = 1 : length(methods)
    technique = methods{i};
    
    for j = 1 : length(similarityList)
        metric = similarityList{j};
        
        xlRange = [column(i) num2str(SimilarityStartRow+j)];
        xlswrite(...
            filename,...
            median(outputMatrices.(technique).similarity.(metric)),...
            sheet,...
            xlRange)
    end
end

%% Format Confusion Matrix

confusionMatrixList = {...
    'truePositives',...
    'trueNegatives',...
    'falsePositives',...
    'falseNegatives',...
    'accuracy'};

for i = 1 : length(methods)
    technique = methods{i};
    
    for j = 1 : length(confusionMatrixList)
        metric = confusionMatrixList{j};
        
        xlRange = [column(i) num2str(ConfusionStartRow+j)];
        xlswrite(...
            filename,...
            median(outputMatrices.(technique).confusionMatrix.(metric)),...
            sheet,...
            xlRange)
    end
end

%% Format DebtRank results

debtRankList = {...
    'top1',...
    'top3',...
    'corr',...
    'overlap1',...
    'overlap3'};

for i = 1 : length(methods)
    technique = methods{i};
    
    for j = 1 : length(debtRankList)
        metric = debtRankList{j};
        
        xlRange = [column(i) num2str(DebtRankStartRow+j)];
        xlswrite(...
            filename,...
            median(1 * outputMatrices.(technique).(metric)),...
            sheet,...
            xlRange)
    end
end

%% Format Liquidity results

LiquidityList = {...
    'liquidityShortfall'};

for i = 1 : length(methods)
    technique = methods{i};
    
    for j = 1 : length(LiquidityList)
        metric = LiquidityList{j};
        
        xlRange = [column(i) num2str(LiquidityStartRow+j)];
        xlswrite(...
            filename,...
            median(1 * outputMatrices.(technique).(metric)),...
            sheet,...
            xlRange)
    end
end